package it.ipzs.qeaaissuer.controller;

import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.authlete.sd.Disclosure;
import com.authlete.sd.SDJWT;
import com.authlete.sd.SDObjectBuilder;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.Curve;
import com.nimbusds.jose.jwk.ECKey;
import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.gen.ECKeyGenerator;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;

import it.ipzs.qeaaissuer.dto.CredentialDefinitionDto;
import it.ipzs.qeaaissuer.dto.CredentialResponse;
import it.ipzs.qeaaissuer.dto.EvidenceDto;
import it.ipzs.qeaaissuer.dto.MdocCborDto;
import it.ipzs.qeaaissuer.dto.RecordDto;
import it.ipzs.qeaaissuer.dto.SourceDto;
import it.ipzs.qeaaissuer.dto.VerifiedClaims;
import it.ipzs.qeaaissuer.model.SessionInfo;
import it.ipzs.qeaaissuer.service.CredentialService;
import it.ipzs.qeaaissuer.service.MdocCborService;
import it.ipzs.qeaaissuer.util.SdJwtUtil;
import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("test")
//controller for testing purpose
public class TestController {

	@Autowired
	private MdocCborService mdocCborService;

	@Autowired
	private CredentialService credService;

	@Autowired
	private SdJwtUtil sdJwtUtil;

	@PostMapping("/list_disclosure")
	public ResponseEntity<Void> listDisclosureFields(@RequestBody String credentials) {

		SDJWT sdJwt = SDJWT.parse(credentials);
		List<Disclosure> disclosures = sdJwt.getDisclosures();
		log.info("credential jwt {}", sdJwt.getCredentialJwt());
		try {
			SignedJWT jwt = SignedJWT.parse(sdJwt.getCredentialJwt());
			JWTClaimsSet claimsSet = jwt.getJWTClaimsSet();
			log.info("claimSet credential: {}", claimsSet);
		} catch (ParseException e) {
			log.error("", e);
		}

		disclosures.stream().forEach(ds -> {
			log.info("disclosure claim name {}", ds.getClaimName());
			log.info("disclosure claim value {}", ds.getClaimValue());
		});

		return ResponseEntity.ok().build();

	}

	@GetMapping("/generate_sd_jwt")
	public ResponseEntity<String> generateSdJwt() throws JOSEException, ParseException {

		String sdJwt = generate();
		return ResponseEntity.ok(sdJwt);
	}

	@GetMapping("/test-mdoc-parsing")
	public ResponseEntity<?> testMdoc() throws IOException {

		try {
			String hexCborTest

			MdocCborDto cborDto = mdocCborService.parseMdocCbor(hexCborTest);
			ObjectMapper objectMapper = new ObjectMapper();

			String jsonString = objectMapper.writeValueAsString(cborDto);
			log.info("mdoc cbor parsed:");
			log.info("{}", jsonString);
			return ResponseEntity.ok(cborDto);

		} catch (Exception e) {
			log.error("", e);
			return ResponseEntity.internalServerError().body(e.getMessage());
		}
	}

	@GetMapping("/test-mdoc-encoding")
	public ResponseEntity<?> testEncodingMdoc() throws IOException {

		try {

			mdocCborService.generateMdocCbor(null, null);
			return ResponseEntity.ok().build();
		} catch (Exception e) {
			log.error("", e);
			return ResponseEntity.internalServerError().body(e.getMessage());
		}
	}

	@PostMapping("/test-multi-credential")
	public ResponseEntity<?> testMultiCredentials(@RequestParam String credential_definition,
			@RequestParam String format) throws IOException {

		CredentialDefinitionDto credDefinition = null;
		ObjectMapper om = new ObjectMapper();
		try {
			credDefinition = om.readValue(credential_definition, CredentialDefinitionDto.class);
		} catch (JsonProcessingException e) {
			log.error("", e);
		}
		CredentialResponse response;
		try {
			String dpop = "eyJ0eXAiOiJkcG9wK2p3dCIsImp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IjgySDRXbFZSbF9DVFVObUFRU2x6aWMzdXRPNTJNQWFlcFF3V05uc2ltT00iLCJ5IjoiaFJtaGdPZTVLLUxhazVZRHYwWndVMFdFNm1sQTJqU2s4R2FRNjBxX0RqMCIsImtpZCI6InNKSG42Tm1KYUR6LWFHTVYxc2VqbnhkV2xiUjFRRlVhM0x1MGRFOVI3b3cifSwiYWxnIjoiRVMyNTYifQ.eyJodG0iOiJQT1NUIiwiaHR1IjoiaHR0cHM6Ly9hcGkuZXVkaS13YWxsZXQtaXQtaXNzdWVyLml0L2NyZWRlbnRpYWwiLCJqdGkiOiJjY2U1Nzk5My1kZWVjLTQzMzctYmZkMy0zMWE3YmU4ZjY4N2UiLCJpYXQiOjE2OTk0NjE0MzksImV4cCI6MTY5OTQ2NTAzOX0.jfYF-QD7MYSxB1a63c-g_ScFZKGD_zk2k4C2cXFYiEA9s5Nl8Wh9gGuX_7JdvmumcsnCNCW4lhr5c1SifFFPug";
			if ("vc+sd-jwt".equals(format)) {
				response = credService.generateSdCredentialResponse(dpop, null, credDefinition);
			} else {
				response = credService.generateMdocCborCredentialResponse(dpop, null, credDefinition);
			}

			log.trace("credential response: {}", response);
			return ResponseEntity.ok(response);
		} catch (JOSEException e) {
			log.error("", e);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		} catch (ParseException e) {
			log.error("", e);
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
	}

	private String generate() throws JOSEException, ParseException {

		SessionInfo sessionInfo = new SessionInfo();

		ECKey ecKey = new ECKeyGenerator(Curve.P_256).keyID(UUID.randomUUID().toString()).generate();

		JWK jwk = ecKey;

		Disclosure nameClaim;
		Disclosure familyClaim;
		Disclosure birthdateClaim;
		// FIXME test data
		if (sessionInfo.getPidCredentialClaims() != null
				&& sessionInfo.getPidCredentialClaims().get("given_name") != null) {
			nameClaim = sdJwtUtil.generateGenericDisclosure("given_name",
					sessionInfo.getPidCredentialClaims().get("given_name"));
		} else {
			nameClaim = sdJwtUtil.generateGenericDisclosure("given_name", "Mario");
		}

		if (sessionInfo.getPidCredentialClaims() != null
				&& sessionInfo.getPidCredentialClaims().get("family_name") != null) {
			familyClaim = sdJwtUtil.generateGenericDisclosure("family_name",
					sessionInfo.getPidCredentialClaims().get("family_name"));
		} else {
			familyClaim = sdJwtUtil.generateGenericDisclosure("family_name", "Rossi");
		}

		if (sessionInfo.getPidCredentialClaims() != null
				&& sessionInfo.getPidCredentialClaims().get("birthdate") != null) {
			birthdateClaim = sdJwtUtil.generateGenericDisclosure("birthdate",
					sessionInfo.getPidCredentialClaims().get("birthdate"));
		} else {
			birthdateClaim = sdJwtUtil.generateGenericDisclosure("birthdate", "1980-10-01");
		}

		Disclosure serialClaim = sdJwtUtil.generateGenericDisclosure("serial_number", "12345678");
		Disclosure accompanyRightClaim = sdJwtUtil.generateGenericDisclosure("accompanying_person_right", "1");
		Disclosure expirationDateClaim = sdJwtUtil.generateGenericDisclosure("expiration_date", "2025-10-01");

		VerifiedClaims vc = new VerifiedClaims();

		EvidenceDto ev = new EvidenceDto();
		ev.setType("electronic_record");

		RecordDto rec = new RecordDto();
		rec.setType("https://eudi.wallet.pdnd.gov.it");
		SourceDto src = new SourceDto();
		src.setCountry_code("IT");
		src.setOrganization_id("urn:eudi:it:organization_id:ipa_code:QLHCFC");
		src.setOrganization_name("Ragioneria Generale dello Stato");

		rec.setSource(src);

		ev.setRecord(rec);

		SDObjectBuilder builder = new SDObjectBuilder();
		builder.putSDClaim(nameClaim);
		builder.putSDClaim(familyClaim);
		builder.putSDClaim(birthdateClaim);
		builder.putSDClaim(serialClaim);
		builder.putSDClaim(accompanyRightClaim);
		builder.putSDClaim(expirationDateClaim);

		SDObjectBuilder evBuilder = new SDObjectBuilder();
		evBuilder.putClaim("assurance_level", "high");
		evBuilder.putClaim("trust_framework", "eidas");
		Disclosure evDisclosure = sdJwtUtil.generateGenericDisclosure("evidence", List.of(ev));
		builder.putSDClaim(evDisclosure);
		evBuilder.putSDClaim(evDisclosure);

		vc.setClaims(builder.build());
		vc.setVerification(evBuilder.build());

		SDJWT sdjwt = new SDJWT(sdJwtUtil.generateCredential(vc, jwk, "EuropeanDisabilityCard"), List.of(evDisclosure,
				nameClaim, familyClaim,
				birthdateClaim, serialClaim, expirationDateClaim, accompanyRightClaim));

		String sdJwtString = sdjwt.toString();
		String substring = sdJwtString.substring(0, sdJwtString.lastIndexOf("~"));

		log.info("sdJwt {}", sdJwtString);
		log.info("---------");
		log.info("substring {}", substring);

		// remove last tilde for SD-JWT draft 4 compliance
		return substring;

	}
}
